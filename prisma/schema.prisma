// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrganizationPermission {
  VIEW_ORGANIZATION_DETAILS
  MANAGE_ORGANIZATION_DETAILS
  MANAGE_MEMBERS
  MANAGE_SETTINGS
  MANAGE_ROLES
}

enum OrganizationInvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PaymentGateway {
  MPESA
  KOPOKOPO
}

enum SMSGateway {
  TEXT_SMS
  ZETATEL
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  role          Role            @default(USER) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  organizations Organization[]
  memberships OrganizationMember[]
  activities OrganizationActivity[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Organization {
  id String @id @default(cuid())
  name String
  email String
  phone String
  logo String?
  description String?
  website String?
  paymentGateway PaymentGateway?
  smsGateway SMSGateway?
  ownerId String
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members OrganizationMember[]
  roles OrganizationRole[]
  invitations OrganizationInvitation[]
  activities OrganizationActivity[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ownerId])
  @@index([ownerId])
}

model OrganizationRole {
  id String @id @default(cuid())
  name String
  description String?
  isDefault Boolean @default(false)
  permissions OrganizationPermission[]
  members OrganizationMember[]
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitations OrganizationInvitation[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, organizationId])
}

model OrganizationMember {
  id String @id @default(cuid())
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId String?
  role OrganizationRole? @relation(fields: [roleId], references: [id], onDelete: SetNull)

  @@unique([organizationId, userId])
  @@index([organizationId, userId])
}

model OrganizationInvitation {
  id String @id @default(cuid())
  email String
  token String
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  roleId String
  role OrganizationRole? @relation(fields: [roleId], references: [id], onDelete: Cascade)
  expires DateTime
  status OrganizationInvitationStatus @default(PENDING)

  @@unique([email, organizationId, token])
  @@index([email, organizationId, token])
}

model OrganizationActivity {
  id String @id @default(cuid())
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}