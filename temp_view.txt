'use client';

import { useState, useEffect, useCallback } from 'react';
import { useSearchParams } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Loader2, Wifi, Clock, Download, Upload } from 'lucide-react';
import { toast } from 'sonner';
import { useTRPC } from '@/trpc/client';
import { useQuery, useMutation } from '@tanstack/react-query';
import Image from 'next/image';

interface Organization {
  id: string;
  name: string;
  description: string | null;
  logo: string | null;
  phone: string;
  email: string;
  website: string | null;
}

interface Voucher {
  id: string;
  voucherCode: string;
  status: string;
  remainingDuration?: {
    milliseconds: number;
    hours: number;
    minutes: number;
    seconds: number;
  } | null;
  package?: {
    name: string;
    downloadSpeed: number;
    uploadSpeed: number;
    duration: number;
    durationType: string;
  };
  organization?: Organization;
}

export default function HotspotStatusPage() {
  const searchParams = useSearchParams();
  const orgId = searchParams.get('org') || 'cmfc3c2fa0001kwyk82la4cw7';
  const voucherCode = searchParams.get('voucher') || '';
  
  const [voucher, setVoucher] = useState<Voucher | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [remainingTime, setRemainingTime] = useState<{
    hours: number;
    minutes: number;
    seconds: number;
  } | null>(null);

  const trpc = useTRPC();

  // Fetch organization details
  const { data: organizationData } = useQuery(
    trpc.hotspot.getOrganization.queryOptions({ orgId })
  );

  // Connect voucher mutation
  const { mutate: connectVoucher } = useMutation(
    trpc.hotspot.connectVoucher.mutationOptions({
      onSuccess: (result) => {
        if (result.voucher) {
          setVoucher(result.voucher);
          
          if (result.voucher.remainingDuration) {
            setRemainingTime({
              hours: result.voucher.remainingDuration.hours,
              minutes: result.voucher.remainingDuration.minutes,
              seconds: result.voucher.remainingDuration.seconds
            });
          }
        }
        setIsLoading(false);
      },
      onError: (error) => {
        console.error('Error checking voucher:', error);
        toast.error('Invalid voucher code');
        setIsLoading(false);
      }
    })
  );


  // Format duration unit
  const formatDurationUnit = (unit: string, value: number): string => {
    if (value === 1) {
      const singularMap: Record<string, string> = {
        'hours': 'hour',
        'days': 'day',
        'weeks': 'week',
        'months': 'month',
      };
      return singularMap[unit] || unit;
    }
    return unit;
  };

  // Check voucher status
  const checkVoucherStatus = useCallback(async () => {
    if (!voucherCode) {
      setIsLoading(false);
      return;
    }

    connectVoucher({ voucherCode });
  }, [voucherCode, connectVoucher]);

  // Update remaining time
  useEffect(() => {
    if (!remainingTime) return;

    const interval = setInterval(() => {
      setRemainingTime(prev => {
        if (!prev) return null;
        
        let { hours, minutes, seconds } = prev;
        
        if (seconds > 0) {
          seconds--;
        } else if (minutes > 0) {
          minutes--;
          seconds = 59;
        } else if (hours > 0) {
          hours--;
          minutes = 59;
          seconds = 59;
        } else {
          // Time expired
          return null;
        }
        
        return { hours, minutes, seconds };
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [remainingTime]);

  useEffect(() => {
    checkVoucherStatus();
  }, [voucherCode, checkVoucherStatus]);

  const organization = organizationData?.organization;

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="h-8 w-8 animate-spin text-blue-600 mx-auto mb-4" />
          <p className="text-gray-600 dark:text-gray-400">Checking voucher status...</p>
        </div>
      </div>
    );
  }

  if (!voucher) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800">
        {/* Header */}
        <header className="bg-white dark:bg-gray-800 shadow-sm border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-3">
              {organization?.logo && (
                <Image 
                  src={organization.logo} 
                  alt={organization.name} 
                  width={32}
                  height={32}
                  className="h-8 w-8 rounded"
                />
              )}
              <h1 className="text-xl font-semibold text-gray-900 dark:text-white">
                {organization?.name || 'ISPinnacle Hotspot'}
              </h1>
            </div>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <Card className="max-w-md mx-auto">
            <CardHeader>
              <CardTitle className="text-center">Invalid Voucher</CardTitle>
              <CardDescription className="text-center">
                The voucher code you provided is not valid or has expired.
              </CardDescription>
            </CardHeader>
            <CardContent className="text-center">
              <Button 
                onClick={() => window.location.href = `/hotspot/login?org=${orgId}`}
                className="w-full"
              >
                <Wifi className="h-4 w-4 mr-2" />
                Get New Voucher
              </Button>
            </CardContent>
          </Card>
        </main>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800">
      {/* Header */}
      <header className="bg-white dark:bg-gray-800 shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-3">
              {organization?.logo && (
                <Image 
                  src={organization.logo} 
                  alt={organization.name} 
                  width={32}
                  height={32}
                  className="h-8 w-8 rounded"
                />
              )}
              <h1 className="text-xl font-semibold text-gray-900 dark:text-white">
                {organization?.name || 'ISPinnacle Hotspot'}
              </h1>
            </div>
            <Badge variant="secondary" className="flex items-center">
              <Wifi className="h-4 w-4 mr-1" />
              Connected
            </Badge>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="text-center mb-8">
          <div className="flex justify-center mb-4">
            <div className="p-3 bg-green-100 dark:bg-green-900 rounded-full">
              <Wifi className="h-8 w-8 text-green-600 dark:text-green-400" />
            </div>
          </div>
          <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
            You&apos;re Connected!
          </h2>
          <p className="text-gray-600 dark:text-gray-400">
